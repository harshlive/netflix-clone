{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","opts","height","width","playerVars","autoplay","Row","title","fetchUrl","isLargerow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_title","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","key","id","src","poster_path","backdrop_path","alt","videoId","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.40c653aa.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL : \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst opts = {\n  height: \"390\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n//test\nfunction Row({ title, fetchUrl, isLargerow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || movie?.original_title || movie?.title || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  return (\n    <div className=\"row\">\n      <h2 className=\"row__title\">{title}</h2>\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n          <img\n            onClick={() => handleClick(movie)}\n            key={movie.id}\n            className={`row__poster ${isLargerow && \"row__posterLarge\"}`}\n            src={`${baseUrl}${\n              isLargerow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"c5cc2a4022dd9be9c515ecdc0cb4a5a6\";\n\nconst requests = {\n    fetchTrending : \"/trending/all/week?api_key=\"+API_KEY+\"&language=en-US\",\n    fetchNetflixOriginals : \"/discover/tv?api_key=\"+API_KEY+\"&with_networks=213\",\n    fetchTopRated : \"/movie/top_rated?api_key=\"+API_KEY+\"&language=en-US\",\n    fetchActionMovies : \"/discover/movie?api_key=\"+API_KEY+\"&with_genres=28\",\n    fetchComedyMovies : \"/discover/movie?api_key=\"+API_KEY+\"&with_genres=35\",\n    fetchHorrorMovies : \"/discover/movie?api_key=\"+API_KEY+\"&with_genres=27\",\n    fetchRomanceMovies : \"/discover/movie?api_key=\"+API_KEY+\"&with_genres=10749\",\n    fetchDocumentaries : \"/discover/movie?api_key=\"+API_KEY+\"&with_genres=99\",\n}\n\nexport default requests;","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\n//test\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length)\n        ]\n      );\n    }\n    fetchData();\n  }, []);\n  console.log(movie);\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  return (\n    <header\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(${baseUrl}${movie?.backdrop_path})`,\n        backgroundPosition: \"center center\",\n      }}\n      className=\"banner\"\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n          <h1 className=\"banner__description\">\n            {truncate(movie?.overview, 150)}\n          </h1>\n        </div>\n      </div>\n      <div className=\"banner--fadeBottom\"></div>\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img\n        className=\"nav__logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"avatar__logo\"\n        src=\"https://pbs.twimg.com/media/DlKNEufWsAAgr2E.jpg\"\n        alt=\"User Logo\"\n      />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <h1>🤖🤖 Hey Harsh, Lets build Netflix today 🤖🤖</h1> */}\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargerow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}